version: 2
jobs:
  build:
    working_directory: /go/src/vary/prom_rest_exporter
    environment:

    docker:
      - image: circleci/golang:1.11.2-stretch

    steps:
      - checkout

      ##############################
      # Fetch dependencies
      ##############################
      - restore_cache:
          name: Restore dependency cache
          keys:
            - v1-deps-{{ checksum "Gopkg.lock" }}
      - run:
          name: Install go dep
          command: curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      - run: 
          name: Get dependencies
          command: dep ensure --vendor-only -v
      - save_cache:
          name: Save dependency cache
          paths:
            - vendor
          key: v1-deps-{{ checksum "Gopkg.lock" }}

      ##############################
      # Build jq
      ##############################
      - run:
          name: Install build tools
          command: sudo apt install  autoconf make libtool flex bison gcc-mingw-w64-x86-64

      - restore_cache:
          name: Restore jq cache
          key: v5-jq

      - run:
          name: Download musl
          command: |
            if [ ! -d musl-1.1.20 ]; then 
              wget https://www.musl-libc.org/releases/musl-1.1.20.tar.gz
              tar xf musl-1.1.20.tar.gz
            fi

      - run:
          name: Build musl
          working_directory: /go/src/vary/prom_rest_exporter/musl-1.1.20
          command: |
            if [ ! -d build ]; then
              ./configure --enable-gcc-wrapper --disable-shared --prefix=$PWD/build
              make
              make install
            fi

      - run:
          name: Download jq master
          command: |
            if [ ! -d jq-master ]; then 
              git clone https://github.com/stedolan/jq.git jq-master
              pushd jq-master
              git checkout jq-1.6
              popd
            fi

      - run:
          name: Build jq for windows
          working_directory: /go/src/vary/prom_rest_exporter/jq-master
          command: |
            if [ ! -d build/win64 ]; then
              git submodule update --init
              autoreconf -fi
              ./configure
              make distclean
              CPPFLAGS=-I$PWD/src scripts/crosscompile win64 \
                --disable-shared \
                --enable-static \
                --enable-all-static \
                --target=win64-x86_64 \
                --host=x86_64-w64-mingw32 \
                --with-oniguruma=builtin
            fi

      - run:
          name: Build jq for linux
          working_directory: /go/src/vary/prom_rest_exporter/jq-master
          command: |
            if [ ! -d build/linux ]; then
              autoreconf -fi
              ./configure --with-oniguruma=builtin --prefix=$PWD/build/linux/usr/local
              sed -i 's/-DHAVE_GAMMA=1//' Makefile
              make -j8 LDFLAGS="-all-static" CC=$PWD/../musl-1.1.20/build/bin/musl-gcc
              make install
              rm -f build/linux/usr/local/lib/*.so*
            fi

      - save_cache:
          name: Save jq cache
          paths:
            - jq-master
            - musl-1.1.20
          key: v5-jq

      ##############################
      # Test and build prom_rest_exporter
      ##############################
      - run:
          name: Test
          command: |
            CC=$PWD/musl-1.1.20/build/bin/musl-gcc \
            go test -v -coverprofile="coverage.out" ./... \
            --ldflags '-linkmode external -extldflags "-static"'

      - run:
          name: Build for linux
          command: |
            CC=$PWD/musl-1.1.20/build/bin/musl-gcc \
            go build \
            --ldflags '-linkmode external -extldflags "-static"'

      - run:
          name: Build for windows
          command: GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc go build -v

      - store_artifacts:
          path: prom_rest_exporter
          destination: binaries/prom_rest_exporter
      - store_artifacts:
          path: prom_rest_exporter.exe
          destination: binaries/prom_rest_exporter.exe

      ##############################
      # Sonar
      ##############################

      - restore_cache:
          name: Restore buildtools cache
          key: v1-buildtools

      - run:
          name: Fetch sonar scanner
          command: |
            if [ ! -d buildtools/sonar-scanner-3.2.0.1227-linux ]; then
              wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
              unzip -d buildtools/ sonar-scanner-cli-3.2.0.1227-linux.zip
            fi

      - save_cache:
          name: Save buildtools cache
          paths:
            - buildtools
          key: v1-buildtools

      - run:
          name: Run sonar analysis
          command: |
            buildtools/sonar-scanner-3.2.0.1227-linux/bin/sonar-scanner \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.login=$SONAR_TOKEN